Resourses:
https://advancedreact.com/

Module 1: Introduction and Setup
Module 2: CSS and Styled Components
Module 3: Server Side GraphQL
Module 4: Client Side GraphQL
Module 5: Accounts, Authentication and Permissions
Module 6: Shopping Cart
Module 7: Advanced UI and Code Quality
Module 8: Credit Card Checkout
Module 9: Testing
Module 10: Deployment



---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 1: Introduction and Setup ----------------------------------------
---------------------------------------------------------------------------------------------------------------

------------------------------------- #1 — Editor Setup and Starter Files Installation (08:29)
https://wesbos.com/uses/

All React apps are created from template: https://github.com/facebook/create-react-app

// run in both folders - frontent and backend 
// A package is a folder containing a program described by a package.json file.
> npm install           // installs a package, and any packages that it depends on (creates node_modules folder).
// > npm help           // Get help on npm


------------------------------------- #2 — Sick Fits and the Tech Stack Behind It (10:30)
We use Apollo to do some caching.

Four main pieces to our application:
    1. React.js         (Frontend)  For Building The Interface along with:
        - Next.js                   for server side rendering, routing and tooling
        - Styled Components         for styling
        - React-Apollo              for interfacing with Apollo Client
        - Jest & Enzyme             for Testing
    2. Apollo Client    (Frontend)  For Data Management
        - Performing GraphQL Mutations
        - Fetching GraphQL Queries
        - Caching GraphQL Data
        - Managing Local State
        - Error and Loading UI States
        - Apollo Client replaces the need for redux + data fetching/caching libraries
    3. GraphQL Yoga     (Backend)   An Express GraphQL Server For:
        - Implementing Query and Mutation Resolvers
        - Custom Server Side Logic
        - Charging Credit Cards with Stripe
        - Sending Email
        - Performing JWT Authentication
        - Checking Permissions
    4. Prisma           (Backend)   A GraphQL Database Interface
        // CRUD - Create Read Update Delete
        - Provides a set of GraphQL CRUD APIs for a MySQL, Postgres or MongoDB Database
        - Schema Definition
        - Data Relationships
        - Queried Directly from our Yoga Server
        - Self-hosted or as-a-service

------------------------------------- #3 — An Intro to Next.js, Tooling and Routing (08:50)
https://nextjs.org/
https://github.com/zeit/next.js/

> npm run dev   // you can find "dev": "next -p 7777" script in package.json

-> Open http://localhost:7777      // you can change the port in the script above.
-> It's gonna give us a 404 cause we haven't created anything.
-> Create index.js file under pages folder. -> Make a React component.
    
    import React from 'react';

    class Home extends React.Component {
        render() {
            return <p>Hello!</p>;
        }
    }

    export default Home;

    OR (the same code):

    const Home = props => (
        <div>
            <p>Hello World!</p>
        </div>
    );

    export default Home;

The linking between 2 pages:
We could just go on the home page and give ourselves an anchor link <a href="/sell">Sell</a> - it will work.. but
this is a react application and we wanna use HTML5 push state in order to route from one page to another without having to
refresh the page, and that's gonna be really important when we have data in our cache. We use the Link.
    
    import Link from 'next/link';

    <Link href="/sell">
        <a>Sell!</a>
    </Link>

If you open inspector you'll see a regular <a> tag but it has been bound to HTML5 pushstate. We never actually refresh the page.


------------------------------------- #4 — Custom _app.js Layout (12:25)

Next.js by default actually wraps your entire application in what's called an app component. However, sometimes you want to do custom.
You want to have, like, a custom wrapper component around all of the pages.
So, in order to do this, you create a custom app. The name of the file is going to be _app.js
    import App, { Container } from 'next/app';

    class myApp extends App {
        render() {
            const { Component } = this.props;

            return (
                <Container>
                    <p>Hey, I'm on every page.</p>
                    <Component />
                </Container>
            );
        }
    }

    export default myApp;

    // Restart the page after inserting.

Download React Dev Tools https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/related?hl=en
Open inspector -> go to React tab.

Reactjs code snippets (VS Code extension)https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets
rcc + tab -> will create class component skeleton

<Head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />      // allows us to have responsive design
    <meta charSet="utf-8" />                                                    // character incoding that we're using
    <link rel="shortcut icon" href="/static/favicon.png" />                     // this is for fav icon
    <link rel="stylesheet" type="text/css" href="/static/nprogress.css" />
    <title>Sick Fits!</title>                                                   // we'll overwrite it
</Head>

.gitignore
https://www.atlassian.com/git/tutorials/saving-changes/gitignore
https://github.com/github/gitignore

---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 2: CSS and Styled Components -------------------------------------
---------------------------------------------------------------------------------------------------------------

------------------------------------- #5 — An Intro to Styled Components (11:19)
We're gonna be using a library called Styled Components https://www.styled-components.com/ in order to write CSS.
There's a couple ways to do CSS in a React application:
    1. write css in a .css file. + <link rel="" type="" href=""> tag
    2. inline css (CSS in JS)

vscode-styled-components https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components

components/
    styles/
        Form.js
        NavStyles.js
        CloseButton.js

OR

components/
    Header/
        index.js
        styles.js
        __test__.js // will include all tests for that specific component
        // anything else related to this specific component

React Context API https://wesbos.com/react-context/
Use Emmet in jsx;


------------------------------------- #6 — Themes and Layout with Styled Components (18:51)

------------------------------------- #7 — Global Styling and Typography with Styled Components (10:50)

------------------------------------- #8 — Visualizing Route Changes (06:44)
NProgress.js - Slim progress bars for Ajax'y applications
https://ricostacruz.com/nprogress/ 
https://github.com/rstacruz/nprogress

------------------------------------- #9 — Fixing Styled Components Flicker on Server Render (04:18)
you see a problem when refresh a page - you got a split second of the css not working?
That's the next litt;e thing that we need to tackle. Style Components by default doesn't work on the server and in order for us
to render.
Next.js fixed it with getInitialProps, Custom <Document>.

Commonly used to implement server side rendering for css-in-js libraries like styled-components or emotion. 
styled-jsx is included with Next.js by default.

On https://www.styled-components.com/docs/advanced it's said 'Basically you need to add a custom pages/_document.js (if you don't have one).'


---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 3: Server Side GraphQL ----------------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #10 — An intro to GraphQL (14:13)

------------------------------------- #11 — Getting Setup with Prisma (22:55)

------------------------------------- #12 — Getting our GraphQL Yoga Server Running (22:32)

------------------------------------- #13 — Our first Query and Mutation (11:40)

------------------------------------- #14 — Items Creation and Prisma Yoga Flow (26:07)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 4: Client Side GraphQL ----------------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #15 — Setting Up Apollo Client with React (11:24)

------------------------------------- #16 — React Meets GraphQL (25:54)

------------------------------------- #17 — Creating Items with Mutations (29:50)

------------------------------------- #18 — Uploading Images (11:46)

------------------------------------- #19 — Updating Items with Queries and Mutations (25:42)

------------------------------------- #20 — Deleting Items (13:04)

------------------------------------- #21 — Displaying Single Items (12:33)

------------------------------------- #22 — Pagination (15:12)

------------------------------------- #23 — Pagination and Cache Invalidation (09:37)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 5: Accounts, Authentication and Permissions ----------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #24 — User Signup and Permission Flow (23:07)

------------------------------------- #25 — User Signup in React (12:13)

------------------------------------- #26 — Currently Logged In User with Middleware and Render Props (18:44)

------------------------------------- #27 — Sign in Form and Custom Error Handling (16:56)

------------------------------------- #28 — Sign Out Button (06:21)

------------------------------------- #29 — Backend Password Reset Flow (19:59)

------------------------------------- #30 — Frontend Password Reset Flow (14:56)

------------------------------------- #31 — Sending Email (12:13)

------------------------------------- #32 — Data Relationships (05:47)

------------------------------------- #33 — Creating a Gated Sign In Component (05:17)

------------------------------------- #34 — Permissions Management (22:34)

------------------------------------- #35 — Updating Permissions in Local State (12:44)

------------------------------------- #36 — Updating Permissions on the Server (17:30)

------------------------------------- #37 — Locking Down DeleteItem Permissions (06:38)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 6: Shopping Cart ----------------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #38 — Creating our cart in React (05:29)

------------------------------------- #39 — Apollo Local State Queries and Mutations (12:30)

------------------------------------- #40 — Server Side Add To Cart (17:04)

------------------------------------- #41 — Displaying Cart Items and Totals (20:00)

------------------------------------- #42 — Removing Cart Items (10:45)

------------------------------------- #43 — Optimistic Response && Cache Updates with Apollo (07:55)

------------------------------------- #44 — Animating our Cart Count Component (13:20)

------------------------------------- #45 — Dealing with Deleted Items in CartItems (03:01)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 7: Advanced UI and Code Quality ----------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #46 — Cleaning Up This Render Prop Mess (06:20)

------------------------------------- #47 — Search Dropdown Autocomplete (18:13)

------------------------------------- #48 — Autocomplete with Downshift (13:08)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 8: Credit Card Checkout ----------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #49 — Credit Card Processing with Stripe Checkout (16:45)

------------------------------------- #50 — Charging Cards on the Server Side (17:50)

------------------------------------- #51 — Saving Orders to the Database (13:14)

------------------------------------- #52 — Displaying Single Orders (17:57)

------------------------------------- #53 — Orders Page (14:19)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 9: Testing ----------------------------------
---------------------------------------------------------------------------------------------------------------
------------------------------------- #54 — Testing with Jest and Enzyme Introduction (07:44)

------------------------------------- #55 — Unit Testing 101 (16:30)

------------------------------------- #56 — Mocking 101 (09:47)

------------------------------------- #57 — First Tests and Shallow Rendering (14:38)

------------------------------------- #58 — Snapshot Testing (15:18)

------------------------------------- #59 — Testing and Mocking Apollo Queries (19:40)

------------------------------------- #60 — More Apollo Query Testing (20:55)

------------------------------------- #61 — Testing Pagination (15:18)

------------------------------------- #62 — Testing Mutations (25:47)

------------------------------------- #63 — More Apollo Client Mutation Testing (15:21)

------------------------------------- #64 — Testing our Cart (25:22)

------------------------------------- #65 — Testing Order Components (15:31)
---------------------------------------------------------------------------------------------------------------
------------------------------------- Module 10: Deployment ----------------------------------
---------------------------------------------------------------------------------------------------------------

------------------------------------- #66 — Deploying a Prisma Server to Heroku (06:49)

------------------------------------- #67 — Deploying Yoga Server to Heroku or Now (11:47)

------------------------------------- #68 — Deploying Frontend to Heroku and Now (09:43)